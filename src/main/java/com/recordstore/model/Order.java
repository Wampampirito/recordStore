package com.recordstore.model;

import java.util.ArrayList;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.recordstore.enums.ORDER_STATUS;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * Represents an order in the record store.
 * This class contains information about the user, products, order status, and
 * total amount.
 * The order is tied to a specific user and can contain multiple products.
 * 
 * Example usage:
 * 
 * <pre>
 * Order order = new Order();
 * order.setUser(user);
 * order.setTrackingNumber("RCD-123-JHN-20250319-001");
 * order.setStatus(ORDER_STATUS.PENDING);
 * order.setTotalAmount(199.99);
 * </pre>
 * 
 */
@Data
@NoArgsConstructor
@Entity
@Table(name = "orders")
public class Order {

    /**
     * The unique identifier of the order.
     * Automatically generated by the database in an incremental fashion.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer orderId;

    /**
     * The unique tracking number of the order.
     * It follows the format RCD-<userId>-<userPrefix>-<datePart>-<orderNumber>.
     * This value is used for tracking the order.
     * 
     * @see com.recordstore.service.OrderService
     */
    @Column(unique = true, nullable = false)
    private String trackingNumber; // Unique tracking number

    /**
     * The user who placed the order.
     * This is a many-to-one relationship with the
     * {@link com.recordstore.model.User} class,
     * where an order belongs to a single user.
     * 
     * @see com.recordstore.model.User
     */
    @ManyToOne
    @JoinColumn(name = "user_id", nullable = false)
    @JsonBackReference
    private User user; // User who placed the order

    /**
     * The products in the order.
     * This is a one-to-many relationship with the
     * {@link com.recordstore.model.OrderProduct} class,
     * where an order can contain multiple products.
     * It is a bidirectional relationship:
     * {@link com.recordstore.model.OrderProduct} references this order.
     * 
     * @see com.recordstore.model.OrderProduct
     */
    @OneToMany(mappedBy = "order", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<OrderProduct> listOrderProducts = new ArrayList<>(); // Products in the order

    /**
     * The status of the order.
     * This indicates the current status of the order and is represented by the
     * {@link com.recordstore.enums.Order_STATUS} enumeration.
     * 
     * @see com.recordstore.enums.Order_STATUS
     */
    @Enumerated(EnumType.STRING)
    @Column(name = "status")
    private ORDER_STATUS status; // Current status of the order

    /**
     * The total amount of the order.
     * This is the sum of the prices of the products in the order, each multiplied
     * by its quantity.
     * The total is calculated automatically by
     * {@link com.recordstore.service.OrderService} when saving the order.
     * 
     * @see com.recordstore.service.OrderService
     */
    @Column(name = "totalAmount")
    private Double totalAmount; // Total amount of the order
}
